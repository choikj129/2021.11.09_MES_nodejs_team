<!DOCTYPE html>
<html>
<head>
    <%- include("./head.ejs") %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/4.2.1/echarts.min.js"></script>

    <style>
        .wrapper1{
            width:42vw;
            height:45vh;                
            background-image: linear-gradient(to top,#00ffcc40, #00d9c740, #00b4ba40, #008DA240, #23698040, #2F485840);
            /*border:0.1em solid white;*/
        }
        .wrapper2{
            width:3vw;
            height:45vh;
            background-color: rgba(0, 255, 195, 0.199);
            text-align: center;
            color:white;
            line-height:5vh;
            /*border:0.1em solid white;*/
        }
        #current_icon{
            background-color: var(--first-color);
        }
    </style>
</head>
<body style="background-color: black; overflow-y:hidden">
    <!-- 용융온도 -->
    <div>
        <div class="wrapper1" style="position: absolute; top:4.5vh; left:11vw;">
            <div id="Chart0" style="width:100%; height:100%"></div>  
        </div>
        <div class="wrapper2" style="position: absolute; top:4.5vh; left:7.5vw;">
            <div style="font-size:2.8vh">
                <b>용<br>융<br>온<br>도</b>
            </div>
        </div>
    </div>
    <!-- 금형온도 -->
    <div>
        <div class="wrapper1" style="position: absolute; top:4.5vh; right:0.8vw;">
            <div id="Chart1" style="width:100%; height:100%"></div>
        </div>
        <div class="wrapper2" style="position: absolute; top:4.5vh; right:43.3vw;">
            <div style="font-size:2.8vh">
                <b>금<br>형<br>온<br>도</b>
            </div>
        </div>
    </div>
    <!-- 사출속도 --> 
    <div>
        <div class="wrapper1" style="position: absolute; top:50.5vh; left:11vw;"> 
            <div id="Chart2" style="width:100%; height:100%"></div>
        </div>
        <div class="wrapper2" style="position: absolute; top:50.5vh; left:7.5vw;">
            <div style="font-size:2.8vh">
                <b>사<br>출<br>속<br>도</b>
            </div>
        </div>
    </div>
    <!-- 압력현황 -->
    <div>
        <div class="wrapper1" style="position: absolute; top:50.5vh; right:0.8vw">
            <div id="Chart3" style="width:100%; height:100%"></div>
        </div>
        <div class="wrapper2" style="position: absolute; top:50.5vh; right:43.3vw;">
            <div style="font-size:2.8vh">
                <b>보<br>압</b>
            </div>
        </div>
    </div>
    
    <script>
        var cur, run, set_melt, set_mold, set_inj, set_hold,
        melt, mold, inj, hold;
        $.ajax({
                url : "/current/cur",
                method : "get",
                dataType : "json",
                async : false,
                success : function(result){
                    cur = result.cur,
                    run = result.run,
                    set_melt = result.set_melt,
                    set_mold = result.set_mold,
                    set_inj = result.set_inj,
                    set_hold= result.set_hold,
                    melt = result.melt,
                    mold = result.mold,
                    inj = result.inj,
                    hold = result.hold
                }
        })
        var melt_temp = [];
        var mold_temp = [];
        var injection_speed = []
        var hold_pressure = []
        var date = [];
        for (var i=0; i<20; i++){
            melt_temp.push(null)
            mold_temp.push(null)
            injection_speed.push(null)
            hold_pressure.push(null)
            date.push(null)
        }
        for (var i=0; i<cur.length; i++){
            melt_temp.shift()
            mold_temp.shift()
            injection_speed.shift()
            hold_pressure.shift()
            date.shift()
            melt_temp.push(cur[i].melt_temp)
            mold_temp.push(cur[i].mold_temp)
            injection_speed.push(cur[i].injection_speed)
            hold_pressure.push(cur[i].hold_pressure)
            date.push(cur[i].date.slice(11,19))
        }

        // 용융온도 그래프
        // DOM을 준비하고 echart 객체를 만듭니다.
        var myChart0 = echarts.init(document.getElementById('Chart0'));
        //UCL, LCL
        const markLine0 = [];
        for (var i = 0; i < 3; i++) {
            markLine0.push(
                {
                    name: 'UCL'+i,
                    yAxis: melt[0]+2*melt[1],
                    symbol : 'none',
                    label: {
                        formatter: 'UCL',
                        position: 'left'
                    }
                }
            );
            markLine0.push(
                {
                    name: 'LCL'+i,
                    yAxis: melt[0]-2*melt[1],
                    symbol: 'none',
                    label: {
                        formatter: 'LCL',
                        position: 'left'
                    }
                }
            );
            markLine0.push(
                {
                    name: 'Setting'+i,
                    yAxis: set_melt,
                    symbol: 'none',
                    label: {
                        formatter: 'Set-up',
                        position: 'left'
                    }
                }
            );
        }

        //chart의 설정을 정합니다.
        var option0 = {
            tooltip: {
                symbol:'none',
                trigger: 'axis',
                axisPointer: {
                    label: {
                        backgroundColor: 'white'
                    }
                }
            },
            legend: {
                data:['용융온도'],
                y:'bottom',
                textStyle: {
                    color: 'white'
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    type: 'category',
                    boundaryGap: true,
                    data: date,
                    axisLabel: {
                        textStyle: {
                            color: 'white'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    type: 'log',
                    scale: true,
                    max: 290,
                    min: 260,
                    boundaryGap: [0.2, 0.2],
                    axisLabel: {
                        formatter: '{value}',
                        textStyle: {
                            color: 'white'
                        }
                    }
                }
            ],
            series: [
                {
                    name: '용융온도',
                    type: 'scatter',
                    yAxisIndex: 0, //yAxis 1번째 사용
                    data: melt_temp,
                    markLine: {
                        data: markLine0,
                        symbol: 'none',
                        itemStyle: {color: 'red'}
                    },
                    color: 'orange'
                }   
            ]
        };

        // 위에서 설정한 속성을 차트에 반영합니다.
        myChart0.setOption(option0); 
        //UCL, LCL
        const markLine1 = [];
        for (var i = 0; i < 3; i++) {
            markLine1.push(
                {
                    name: 'UCL'+i,
                    yAxis: mold[0]+2*mold[1],
                    symbol : 'none',
                    label: {
                        formatter: 'UCL',
                        position: 'left'
                    }
                }
            );
            markLine1.push(
                {
                    name: 'LCL'+i,
                    yAxis: mold[0]-2*mold[1],
                    symbol: 'none',
                    label: {
                        formatter: 'LCL',
                        position: 'left'
                    }
                }
            );
            markLine1.push(
                {
                    name: 'Setting'+i,
                    yAxis: set_mold,
                    symbol: 'none',
                    label: {
                        formatter: 'Set-up',
                        position: 'left'
                    }
                }
            );
        }  

        //금형온도 그래프
        // DOM을 준비하고 echart 객체를 만듭니다.
        var myChart1 = echarts.init(document.getElementById('Chart1'));

        //chart의 설정을 정합니다.
        var option1 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    label: {
                        backgroundColor: '#283b56'
                    }
                }
            },
            legend: {
                data:['금형온도'],
                y:'bottom',
                textStyle: {
                    color: 'white'
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    type: 'category',
                    boundaryGap: true,
                    data: date,
                    axisLabel: {
                        textStyle: {
                            color: 'white'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    type: 'log',
                    scale: true,
                    max: 35,
                    min: 15,
                    boundaryGap: [0.2, 0.2],
                    axisLabel: {
                        formatter: '{value}',
                        textStyle: {
                            color: 'white'
                        }
                    },
                }
            ],
            series: [
                {
                    name: '금형온도',
                    type: 'scatter',
                    lineStyle:{
                        color:'#2A265C' //line차트 색상 변경
                    },
                    yAxisIndex: 0, //yAxis 1번째 사용
                    data: mold_temp,
                    markLine: {
                        data: markLine1,
                        symbol: 'none',
                        itemStyle: {color: 'red'}
                    },
                    color: 'orange'
                }
            ]
        };

        // 위에서 설정한 속성을 차트에 반영합니다.
        myChart1.setOption(option1);     

        //UCL, LCL
        const markLine2 = [];
        for (var i = 0; i < 3; i++) {
            markLine2.push(
                {
                    name: 'UCL'+i,
                    yAxis: inj[0]+2*inj[1],
                    symbol : 'none',
                    label: {
                        formatter: 'UCL',
                        position: 'left'
                    }
                }
            );
            markLine2.push(
                {
                    name: 'LCL'+i,
                    yAxis: inj[0]-2*inj[1],
                    symbol: 'none',
                    label: {
                        formatter: 'LCL',
                        position: 'left'
                    }
                }
            );
            markLine2.push(
                {
                    name: 'Setting'+i,
                    yAxis: set_inj,
                    symbol: 'none',
                    label: {
                        formatter: 'Set-up',
                        position: 'left'
                    }
                }
            );
        }

        //사출속도 그래프

        // DOM을 준비하고 echart 객체를 만듭니다.
        var myChart2 = echarts.init(document.getElementById('Chart2'));

        //chart의 설정을 정합니다.
        var option2 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    label: {
                        backgroundColor: '#283b56'
                    }
                }
            },
            legend: {
                data:['사출속도'],
                y:'bottom',
                textStyle: {
                    color: 'white'
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    type: 'category',
                    boundaryGap: true,
                    data: date,
                    axisLabel: {
                        textStyle: {
                            color: 'white'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    type: 'log',
                    scale: true,
                    max: 65,
                    min: 45,
                    boundaryGap: [0.2, 0.2],
                    axisLabel: {
                        formatter: '{value}',
                        textStyle: {
                            color: 'white'
                        }
                    },
                }
            ],
            series: [
                {
                    name: '사출속도',
                    type: 'scatter',
                    lineStyle:{
                        color:'#2A265C' //line차트 색상 변경
                    },
                    yAxisIndex: 0, //yAxis 1번째 사용
                    data: injection_speed,
                    markLine: {
                        data: markLine2,
                        symbol: 'none',
                        itemStyle: {color: 'red'}
                    },
                    color: 'orange'
                }
            ]
        };

        // 위에서 설정한 속성을 차트에 반영합니다.
        myChart2.setOption(option2);

        //UCL, LCL
        const markLine3 = [];
        for (var i = 0; i < 3; i++) {
            markLine3.push(
                {
                    name: 'UCL'+i,
                    yAxis: hold[0]+2*hold[1],
                    symbol : 'none',
                    label: {
                        formatter: 'UCL',
                        position: 'left'
                    }
                }
            );
            markLine3.push(
                {
                    name: 'LCL'+i,
                    yAxis: hold[0]-2*hold[1],
                    symbol: 'none',
                    label: {
                        formatter: 'LCL',
                        position: 'left'
                    }
                }
            );
            markLine3.push(
                {
                    name: 'Setting'+i,
                    yAxis: set_hold,
                    symbol: 'none',
                    label: {
                        formatter: 'Set-up',
                        position: 'left'
                    }
                }
            );
        }  

        // 보압 그래프

        // DOM을 준비하고 echart 객체를 만듭니다.
        var myChart3 = echarts.init(document.getElementById('Chart3'));

        //chart의 설정을 정합니다.
        var option3 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    label: {
                        backgroundColor: '#283b56'
                    }
                }
            },
            legend: {
                data:['보압'],
                y:'bottom',
                textStyle: {
                    color: 'white'
                }
            },
            dataZoom: {
                show: false,
                start: 0,
                end: 100
            },
            xAxis: [
                {
                    type: 'category',
                    boundaryGap: true,
                    data: date,
                    axisLabel: {
                        textStyle: {
                            color: 'white'
                        }
                    },
                },
            ],
            yAxis: [
                {
                    type: 'log',
                    scale: true,
                    max: 145,
                    min: 125,
                    boundaryGap: [0.2, 0.2],
                    axisLabel: {
                        formatter: '{value}',
                        textStyle: {
                            color: 'white'
                        }
                    },
                }
            ],
            series: [
                {
                    name: '보압',
                    type: 'scatter',
                    lineStyle:{
                        color:'#2A265C' //line차트 색상 변경
                    },
                    yAxisIndex: 0, //yAxis 1번째 사용
                    data: hold_pressure,
                    markLine: {
                        data: markLine3,
                        symbol: 'none',
                        itemStyle: {color: 'red'}
                    },
                    color: 'orange'
                }
            ]
        };

        // 위에서 설정한 속성을 차트에 반영합니다.
        myChart3.setOption(option3);

        if(run){
            setInterval(function (){
            $.getJSON("/current/update",
            function(result){
                //x축에 실시간 데이터 생성
                //용융온도
                if (result.cur.cnt == result.cur.total){
                    location.href = "/stop?url=current"
                }
                var axisData = result.cur.date.slice(11,19);
                var data0 = option0.series[0].data
                //데이터의 가장 왼쪽 값을 제거
                if(date.length==20){
                    data0.shift();
                    option0.xAxis[0].data.shift();
                }
                //데이터의 가장 오른쪽 값을 추가
                data0.push(result.cur.melt_temp)
                //x축에 시간 데이터 추가
                option0.xAxis[0].data.push(axisData);
                //차트에 반영
                myChart0.setOption(option0);


                // 금형온도
                //x축에 실시간 데이터 생성
                var data1 = option1.series[0].data; //순수익 데이터
                //데이터의 가장 왼쪽 값을 제거
                if(date.length==20){
                    data1.shift();
                    option1.xAxis[0].data.shift();
                }
                //데이터의 가장 오른쪽 값을 추가
                data1.push(result.cur.mold_temp);
                //x축에 시간 데이터 추가
                option1.xAxis[0].data.push(axisData);
                //차트에 반영
                myChart1.setOption(option1);


                //속도
                var data2 = option2.series[0].data;
                //데이터의 가장 왼쪽 값을 제거
                if(date.length==20){
                    data2.shift();
                    option2.xAxis[0].data.shift();
                }
                //데이터의 가장 오른쪽 값을 추가
                data2.push(result.cur.injection_speed);
                //x축에 시간 데이터 추가
                option2.xAxis[0].data.push(axisData);
                //차트에 반영
                myChart2.setOption(option2);
                })


                // 압력
                var data3 = option3.series[0].data; //순수익 데이터
                //데이터의 가장 왼쪽 값을 제거
                if(date.length==20){
                    data3.shift();
                    option3.xAxis[0].data.shift();
                }
                //데이터의 가장 오른쪽 값을 추가
                data3.push(result.cur.hold_pressure);
                //x축에 시간 데이터 추가
                option3.xAxis[0].data.push(axisData);
                //차트에 반영
                myChart3.setOption(option3);
            }, 2100);
        }
    </script>

</body>
</html>